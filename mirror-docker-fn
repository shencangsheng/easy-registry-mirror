#!/bin/bash
# Author: Cangsheng Sheng
# Email: shencangsheng@126.com
# Created: 2024-06-10
# Version: 1.0

source ./tools

function mirror_docker_install() {
  cp -n example/requirements.txt requirements.txt

  docker compose up -d

  local content=$(
    cat <<EOF

Configure /etc/docker/daemon.json on the application server, Then restart Docker

vim /etc/docker/daemon.json

==============================================
{
${_GREEN}
  "registry-mirrors": ["http://xx.xx.xx.xx:5000"],
  "insecure-registries": [
    "xx.xx.xx.xx:5000"
  ]
${_NC}
}
===============================================

systemctl daemon-reload
systemctl restart docker

## Trying

docker pull xx.xx.xx.xx:5000/busybox:latest
docker pull busybox:latest

EOF
  )
  echo -e "$content"
}

function mirror_docker_uninstall() {
  docker compose down

  local content=$(
    cat <<EOF

Configure /etc/docker/daemon.json on the application server, Then restart Docker

vim /etc/docker/daemon.json

==============================================
{
${_RED}
  "registry-mirrors": ["http://xx.xx.xx.xx:5000"],
  "insecure-registries": [
    "xx.xx.xx.xx:5000"
  ]
${_NC}
}
===============================================

systemctl daemon-reload
systemctl restart docker

EOF
  )
  echo -e "$content"
}

function mirror_docker_join() {
  local content=$(
    cat <<EOF

Configure /etc/docker/daemon.json on the application server, Then restart Docker

vim /etc/docker/daemon.json

==============================================
{
${_GREEN}
  "registry-mirrors": ["http://xx.xx.xx.xx:5000"],
  "insecure-registries": [
    "xx.xx.xx.xx:5000"
  ]
${_NC}
}
===============================================

systemctl daemon-reload
systemctl restart docker

## Trying

docker pull xx.xx.xx.xx:5000/busybox:latest
docker pull busybox:latest

EOF
  )
  echo -e "$content"
}

function mirror_docker_help() {
  cat <<EOF

  Usage: ./ctl docker [OPTION...]

  Examples:
        ./ctl docker install # Install Docker registry
        ./ctl docker uninstall # Uninstall Docker registry
        ./ctl docker status # Show Docker status
        ./ctl docker join # Show trying
        ./ctl docker sync help # Show Docker images sync help
        ./ctl docker sync status # Show Docker images sync status
        ./ctl docker clean # Clean out
EOF
}

function mirror_docker_install_sync_images() {

  local cron_file=$(get_cron_file)

  if [ ! -e "$cron_file" ]; then
    touch $cron_file
    chmod 600 "$cron_file"
  fi

  local sync_flag=$(cat $cron_file | grep "$_PWD/ctl docker sync exec" | wc -l)

  if [ $sync_flag -eq 0 ]; then
    echo "0 1 * * 1 bash $_PWD/ctl docker sync exec" >>$cron_file
    Info "Create a task to complete"
  fi

}

function mirror_docker_uninstall_sync_images() {
  local cron_file=$(get_cron_file)
  local sync_flag=$(cat $cron_file | grep "$_PWD/ctl docker sync exec" | wc -l)

  if [ $sync_flag -gt 0 ]; then
    sed -i "\|$_PWD/ctl docker sync exec|d" $cron_file
    Info "Remove a task to complete"
  fi
}

function mirror_docker_exec_sync_images() {

  local requirements=$(cat requirements.txt)

  set +e

  for image in "${requirements[@]}"; do
    docker pull $image
    docker tag $image 127.0.0.1:15000/$image
    docker push 127.0.0.1:15000/$image
  done

  set -e

}

function mirror_docker_help_sync_images() {
  cat <<EOF

  edit mirror-docker/requirements.txt

  -----
  busybox:1.35.0
  nginx:latest
  -----

  Usage: ./ctl docker sync [OPTION...]

  Examples:
        ./ctl docker sync install # Enable auto sync images task
        ./ctl docker sync uninstall # Uninstall auto sync images task
        ./ctl doecker sync exec # Sync requirements.txt images
EOF
}

function mirror_docker_sync_status() {
  local cron_file=$(get_cron_file)
  local sync_flag=$(cat $cron_file | grep "$_PWD/ctl docker sync exec" | wc -l)

  if [ $sync_flag -eq 0 ]; then
    echo "Active: ${_RED}inactive (dead)${_NC}"
  else
    echo "Active: ${_GREEN}active (running)${_NC}"
  fi
}

function mirror_docker_status() {

  local sync_status=$(mirror_docker_sync_status)

  local content=$(
    cat <<EOF
    ● docker.service
      $(get_service_status)
    ● docker.sync-image.service
      $sync_status
EOF
  )
  echo -e "$content"
}

function mirror_docker_clean() {
  mirror_docker_uninstall
  del_docker_vol 'mirror-docker-vol'
}
