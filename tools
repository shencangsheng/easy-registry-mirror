#!/bin/bash
# Author: Cangsheng Sheng
# Email: shencangsheng@126.com
# Created: 2024-06-10
# Version: 1.0

set -e

_RED='\033[0;31m'
_GREEN='\033[0;32m'
_YELLOW='\033[1;33m'
_NC='\033[0m' # No Color

Error() {
    echo -e "\033[31m[Error] $1 \033[0m" >&2
}

Usage() {
    echo -e "\033[33m[Usage] $1 \033[0m" >&2
}

Info() {
    echo -e "[Info] $1" >&2
}

Todo() {
    echo -e "\033[36m[Todo] $1 \033[0m" >&2
}

Notice() {
    echo -e "\033[33m[Important] $1 \033[0m" >&2
}

function prompt_confirmation() {
    local message=$1
    local response

    read -r -p "$message [Y/n] " response

    case $response in
    [yY][eE][sS] | [yY])
        return 0
        ;;
    [nN][oO] | [nN])
        return 1
        ;;
    *)
        Error "Unknown option $response"
        exit 1
        ;;
    esac
}

function check_directory() {
    if [ ! -d "$1" ]; then
        Error "「$1」 No such directory / Must be a directory"
        exit 1
    fi
}

function check_file() {
    if [ ! -f "$1" ]; then
        Error "「$1」 No such file / Must be a file"
        exit 1
    fi
}

function get_args_value() {
    local key="--$1"
    local def_value=$2
    local value=$def_value
    for arg in "${_ARGS[@]}"; do
        case $arg in
        "${key}="*)
            value="${arg#*=}"
            break
            ;;
        esac
    done
    if [ -z "$value" ]; then
        Error "「${key}」Variable is empty"
        kill -9 $$
    fi
    echo $value
}

function contains_args() {
    local key="$1"
    for arg in "${_ARGS[@]}"; do
        case $arg in
        "${key}")
            return 0
            ;;
        esac
    done
    return 1
}

function create_docker_vol() {
    local vol_name=$1

    if ! docker volume inspect $vol_name >/dev/null 2>&1; then
        Info "Creating volume $vol_name..."
        docker volume create $vol_name
    fi
}

function create_docker_network() {
    local network_name=$1

    if ! docker network inspect $network_name >/dev/null 2>&1; then
        Info "Creating volume $network_name..."
        docker network create $network_name
    fi
}

function get_cron_file() {
    local os_name=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
    local cron_file=
    if [[ $os_name = *"Debian"* ]]; then
        cron_file="/var/spool/cron/crontabs/root"
    elif [[ $os_name = *"CentOS"* ]]; then
        cron_file="/var/spool/cron/root"
    elif [[ $os_name = *"Ubuntu"* ]]; then
        cron_file="/var/spool/cron/crontabs/root"
    else
        Error "This OS is not recognizable"
        exit 1
    fi

    if [ ! -e "$cron_file" ]; then
        touch $cron_file
        chmod 600 $cron_file
    fi

    echo $cron_file
}

function get_service_status() {
    local services_status=$(docker compose ps --services --filter "status=running" 2>&1 | grep -v 'level=warning')
    local all_services=$(docker compose config --services 2>&1 | grep -v 'level=warning')

    IFS=' ' read -r -a running_services <<<"$services_status"
    IFS=' ' read -r -a all_services_array <<<"$all_services"

    if [ ${#running_services[@]} -eq ${#all_services_array[@]} ]; then
        echo "Active: ${_GREEN}active (running)${_NC}"
    else
        echo "Active: ${_RED}inactive (dead)${_NC}"
    fi
}

function del_docker_vol() {
    local vol_name=$1

    if docker volume inspect $vol_name >/dev/null 2>&1; then
        docker volume rm $vol_name
    fi
}
